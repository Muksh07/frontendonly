[HttpPost]
        [Route("CodeSynthesis")]
        public async Task<ActionResult<string>> CodeSynthesis([FromBody] CodeSynthesisRequestModel requestModel)
        {
            Console.WriteLine("before try Filename:", requestModel.filename);
            Console.WriteLine("before try Content:", requestModel.filecontent);

            try
            {
                string generatedCode = string.Empty;
                switch (requestModel.i)
                {
                    case 0:
                        Console.WriteLine("Filename:", requestModel.filename);
                        Console.WriteLine("Content:", requestModel.filecontent);
                        var prompttext0 = _functionality.GetPromptText(requestModel.filename, requestModel.filecontent);
                        Console.WriteLine("prompttext0", prompttext0);
                        generatedCode = await _functionality.AnalyzeBRD(prompttext0, gPTService.GetPromptTask(4), 3);
                        break;

                    case 1:  // DataBase
                        var prompttext1 = _functionality.GetPromptText(requestModel.filename, requestModel.filecontent);
                        Console.WriteLine("prompttext1", prompttext1);
                        generatedCode = await _functionality.AnalyzeBRD(prompttext1, gPTService.GetPromptTask(6), 3);
                        break;

                    case 2:   // Unit testing
                        var prompttext2 = _functionality.GetPromptText(requestModel.filename, requestModel.filecontent);
                        Console.WriteLine("prompttext2", prompttext2);
                        generatedCode = await _functionality.AnalyzeBRD(prompttext2, gPTService.GetPromptTask(7), 3);
                        break;

                    case 3:  // Describe the code
                        var prompttext3 = requestModel.filecontent;
                        Console.WriteLine("prompttext3", prompttext3);
                        generatedCode = await _functionality.AnalyzeBRD(prompttext3, gPTService.GetPromptTask(8), 3);
                        break;

                    default:
                        return BadRequest("Invalid case value");
                }

                Console.WriteLine("generatedcode", generatedCode);
                return Ok(generatedCode);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }



 public class CodeSynthesisRequestModel
    {
        public string? filename { get; set; }
        public string? filecontent { get; set; }
        public int i { get; set; }
    }



{
  "type": "https://tools.ietf.org/html/rfc9110#section-15.5.1",
  "title": "One or more validation errors occurred.",
  "status": 400,
  "errors": {
    "request": [
      "The request field is required."
    ],
    "$.filecontent": [
      "'0x0A' is invalid within a JSON string. The string should be correctly escaped. Path: $.filecontent | LineNumber: 2 | BytePositionInLine: 37."
    ]
  },
  "traceId": "00-af7653e5d5f3881bb9d09797e9a1794f-0e255680520eb336-00"
}



using backend.Service;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddControllers();
builder.Services.AddCors();
builder.Services.AddTransient<Functionality>();
builder.Services.AddHttpClient(); 
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseCors(x => x
.AllowAnyHeader()
.AllowAnyMethod()
.AllowAnyOrigin()
);

app.UseAuthorization();
app.MapControllers();

app.Run();


